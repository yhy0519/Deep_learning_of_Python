# 5. 훈련 데이터의 일부를 validation 데이터로 구성합니다. (훈련 70, 검증:30)
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, 
                                                  test_size = 0.3, 
                                                  random_state = 777)


# 모델 구성 
model = Sequential()
# 첫번째 층은 반드시 input_shape 를 지정해야한다. 
#  x_train.shape ( 19000, 128, 128, 3 )   
# input_shape=x_train.shape[1:] (128, 128, 3)   (칼라사진)
# mnist 와 비교하면 mnist 의 경우는 첫층이 완전연결계층이므로 
# Flatten 시켜서  Flatten(input_shape=(28,28) ) 이렇게 입력했었고 (흑백사진)
# Convolution 층은 이미지의 형상이 무시되지 않도록 입력해야하기 때문에 
# (128, 128, 3)  이렇게 3차원으로 넣어야한다. 

# convolution 1층
model.add(Conv2D(32, (3, 3), padding='same', input_shape=x_train.shape[1:]))
model.add(BatchNormalization())
model.add(Activation('relu'))

# convolution 2층
model.add(Conv2D(32, (3, 3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# convolution 3층
model.add(Conv2D(64, (3, 3), padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))

# convolution 4층
model.add(Conv2D(64, (3, 3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# 완전연결계층
model.add(Flatten())  # 완전 연결계층에 입력할때는 flatten 시켜야합니다.
model.add(Dense(512))  # 완전 연결계층 1층의 뉴런의 개수 512개
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.5))

# 출력층
model.add(Dense(num_classes))  # 출력층의 뉴런의 개수 2개
model.add(Activation('softmax'))
 
# 모델 설정 
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
  
# 데이터 정규화 (중요부분. 이상치에 민감해서 정규화를 실행해야 잘 된다.)
x_train = x_train.astype('float32')  # 실수형으로 숫자를 다 변환시킨다.
#x_test = x_test.astype('float32')
x_train /= 255  # 255 로 숫자를 다 나눠서 0~1 사이의 숫자로 변환
#x_test /= 255
 
# 모델 학습 
hist = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=epochs, batch_size=batch_size)
 
# 모델 평가 
scores = model.evaluate(x_train, y_train, verbose=0)

#[0.3352026641368866, 0.9929999709129333]
#    오차                        정확도 

print("CNN Error: %.2f%%" % (100-scores[1]*100))
 
save_model(model, "C:\\gimages2\\leaf9.h5") # 모델을 저장(pickle 생성)
